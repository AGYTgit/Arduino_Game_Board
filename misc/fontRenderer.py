from PIL import Image, ImageDraw

# Font: 8x8 pixel bitmaps
font = [
    [0b00111100, 0b01100110, 0b01001010, 0b01001010, 0b01010010, 0b01100110, 0b00111100, 0b00000000], # 0
    [0b00011000, 0b00111000, 0b01111000, 0b00011000, 0b00011000, 0b00011000, 0b01111110, 0b00000000], # 1
    [0b00111100, 0b01100110, 0b00000110, 0b00011100, 0b00110000, 0b01100110, 0b01111110, 0b00000000], # 2
    [0b01111110, 0b00000110, 0b00001100, 0b00011100, 0b00000110, 0b01100110, 0b00111100, 0b00000000], # 3
    [0b00001110, 0b00011110, 0b00110110, 0b01100110, 0b01111111, 0b00000110, 0b00001111, 0b00000000], # 4
    [0b01111110, 0b01100000, 0b01100000, 0b01111100, 0b00000110, 0b01100110, 0b01111100, 0b00000000], # 5
    [0b00011110, 0b00110000, 0b01100000, 0b01111110, 0b01100011, 0b01100011, 0b00111110, 0b00000000], # 6
    [0b01111111, 0b01100011, 0b00000110, 0b00001100, 0b00011000, 0b00011000, 0b00011000, 0b00000000], # 7
    [0b00111110, 0b01100011, 0b01100011, 0b00111110, 0b01100011, 0b01100011, 0b00111110, 0b00000000], # 8
    [0b00111110, 0b01100011, 0b01100011, 0b00111111, 0b00000011, 0b00000110, 0b00111100, 0b00000000], # 9

    [0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000], # ' '

    [0b00011100, 0b00110110, 0b01100011, 0b01100011, 0b01111111, 0b01100011, 0b01100011, 0b00000000], # A
    [0b01111110, 0b00110011, 0b00110011, 0b00111110, 0b00110011, 0b00110011, 0b01111110, 0b00000000], # B
    [0b00011110, 0b00110011, 0b01100000, 0b01100000, 0b01100000, 0b00110011, 0b00011110, 0b00000000], # C
    [0b01111100, 0b00110110, 0b00110011, 0b00110011, 0b00110011, 0b00110110, 0b01111100, 0b00000000], # D
    [0b01111111, 0b00110001, 0b00110100, 0b00111100, 0b00110100, 0b00110001, 0b01111111, 0b00000000], # E
    [0b01111111, 0b00110001, 0b00110100, 0b00111100, 0b00110100, 0b00110000, 0b00110000, 0b00000000], # F
    [0b00011110, 0b00110011, 0b01100000, 0b01100000, 0b01100111, 0b00110011, 0b00011111, 0b00000000], # G
    [0b01100011, 0b01100011, 0b01100011, 0b01111111, 0b01100011, 0b01100011, 0b01100011, 0b00000000], # H
    [0b00111100, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00111100, 0b00000000], # I
    [0b00011111, 0b00000110, 0b00000110, 0b00000110, 0b01100110, 0b01101110, 0b00111100, 0b00000000], # J
    [0b01110011, 0b00110011, 0b00110110, 0b00111100, 0b00110110, 0b00110011, 0b01110011, 0b00000000], # K
    [0b01111000, 0b00110000, 0b00110000, 0b00110000, 0b00110001, 0b00110011, 0b00111111, 0b00000000], # L
    [0b01100011, 0b01110111, 0b01111111, 0b01101011, 0b01100011, 0b01100011, 0b01100011, 0b00000000], # M
    [0b01100011, 0b01110011, 0b01111011, 0b01101111, 0b01100111, 0b01100011, 0b01100011, 0b00000000], # N
    [0b00111110, 0b01100011, 0b01100011, 0b01100011, 0b01100011, 0b01100011, 0b00111110, 0b00000000], # O
    [0b01111110, 0b00110011, 0b00110011, 0b00111110, 0b00110000, 0b00110000, 0b01111000, 0b00000000], # P
    [0b00111110, 0b01100011, 0b01100011, 0b01100011, 0b01101011, 0b01101111, 0b00111110, 0b00000000], # Q
    [0b01111110, 0b00110011, 0b00110011, 0b00111110, 0b00110110, 0b00110011, 0b01110011, 0b00000000], # R
    [0b00111110, 0b01100011, 0b01100000, 0b00111110, 0b00000011, 0b01100011, 0b00111110, 0b00000000], # S
    [0b01111110, 0b01011010, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00111100, 0b00000000], # T
    [0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b00111100, 0b00000000], # U
    [0b01100011, 0b01100011, 0b01100011, 0b01100011, 0b00110110, 0b00111110, 0b00011100, 0b00000000], # V
    [0b01100011, 0b01100011, 0b01101011, 0b01101011, 0b01101011, 0b01111111, 0b00110110, 0b00000000], # W
    [0b01100011, 0b00110110, 0b00011100, 0b00011100, 0b00011100, 0b00110110, 0b01100011, 0b00000000], # X
    [0b01100110, 0b01100110, 0b01100110, 0b00111100, 0b00011000, 0b00011000, 0b00111100, 0b00000000], # Y
    [0b01111111, 0b01000011, 0b00000110, 0b00001100, 0b00011001, 0b00110011, 0b01111111, 0b00000000], # Z

    [0b00000000, 0b00000000, 0b00111100, 0b00000110, 0b00111110, 0b01100110, 0b00111011, 0b00000000], # a
    [0b01110000, 0b00110000, 0b00111110, 0b00110011, 0b00110011, 0b00110011, 0b01101110, 0b00000000], # b
    [0b00000000, 0b00000000, 0b00011110, 0b00110011, 0b00110000, 0b00110011, 0b00011110, 0b00000000], # c
    [0b00000111, 0b00000110, 0b00111110, 0b01100110, 0b01100110, 0b01100110, 0b00111011, 0b00000000], # d
    [0b00000000, 0b00000000, 0b00111100, 0b01100110, 0b01111110, 0b01100000, 0b00111110, 0b00000000], # e
    [0b00001110, 0b00011000, 0b00011000, 0b01111110, 0b00011000, 0b00011000, 0b00111100, 0b00000000], # f
    [0b00000000, 0b00000000, 0b00111111, 0b01100110, 0b01100110, 0b00111110, 0b00000110, 0b01111100], # g
    [0b01110000, 0b00110000, 0b00111110, 0b00110011, 0b00110011, 0b00110011, 0b01110011, 0b00000000], # h
    [0b00000000, 0b00001100, 0b00000000, 0b00011100, 0b00001100, 0b00001100, 0b00011110, 0b00000000], # i
    [0b00000000, 0b00000110, 0b00000000, 0b00000110, 0b00000110, 0b01100110, 0b01100110, 0b00111100], # j
    [0b01110000, 0b00110000, 0b00110011, 0b00110110, 0b00111100, 0b00110110, 0b01110011, 0b00000000], # k
    [0b00000000, 0b00011100, 0b00001100, 0b00001100, 0b00001100, 0b00001100, 0b00011110, 0b00000000], # l
    [0b00000000, 0b00000000, 0b01111110, 0b01101011, 0b01101011, 0b01101011, 0b01101011, 0b00000000], # m
    [0b00000000, 0b00000000, 0b01111110, 0b00110011, 0b00110011, 0b00110011, 0b00110011, 0b00000000], # n
    [0b00000000, 0b00000000, 0b00011110, 0b00110011, 0b00110011, 0b00110011, 0b00011110, 0b00000000], # o
    [0b00000000, 0b00000000, 0b01111110, 0b00110011, 0b00110011, 0b00111110, 0b00110000, 0b01111000], # p
    [0b00000000, 0b00000000, 0b00111111, 0b01100110, 0b01100110, 0b00111110, 0b00000110, 0b00001111], # q
    [0b00000000, 0b00000000, 0b01101110, 0b00111011, 0b00110011, 0b00110000, 0b01111000, 0b00000000], # r
    [0b00000000, 0b00000000, 0b00011111, 0b00110000, 0b00011110, 0b00000011, 0b00111110, 0b00000000], # s
    [0b00011000, 0b00011000, 0b01111110, 0b00011000, 0b00011000, 0b00011011, 0b00001110, 0b00000000], # t
    [0b00000000, 0b00000000, 0b01100110, 0b01100110, 0b01100110, 0b01100110, 0b00111011, 0b00000000], # u
    [0b00000000, 0b00000000, 0b01100110, 0b01100110, 0b01100110, 0b00111100, 0b00011000, 0b00000000], # v
    [0b00000000, 0b00000000, 0b01100011, 0b01101011, 0b01101011, 0b01111111, 0b00110110, 0b00000000], # w
    [0b00000000, 0b00000000, 0b01100011, 0b00110110, 0b00011100, 0b00110110, 0b01100011, 0b00000000], # x
    [0b00000000, 0b00000000, 0b01100011, 0b01100011, 0b00110110, 0b00011100, 0b00011000, 0b01110000], # y
    [0b00000000, 0b00000000, 0b00111111, 0b00100110, 0b00001100, 0b00011001, 0b00111111, 0b00000000], # z

    [0b00000000, 0b00000000, 0b00000000, 0b00111100, 0b00000000, 0b00000000, 0b00000000, 0b00000000], # -
    [0b00000000, 0b00000000, 0b00111100, 0b00000000, 0b00111100, 0b00000000, 0b00000000, 0b00000000], # =
    [0b00011000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00011000, 0b00000000], # [
    [0b00011000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00011000, 0b00000000], # ]
    [0b00110000, 0b00010000, 0b00011000, 0b00001000, 0b00001100, 0b00000100, 0b00000110, 0b00000000], # '\'
    [0b00000000, 0b00011000, 0b00011000, 0b00000000, 0b00000000, 0b00011000, 0b00011000, 0b00110000], # ;
    [0b00001000, 0b00011000, 0b00011000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000], # '
    [0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00011000, 0b00011000, 0b00110000], # ,
    [0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00011000, 0b00011000, 0b00000000], # .
    [0b00000110, 0b00000100, 0b00001100, 0b00001000, 0b00011000, 0b00010000, 0b00110000, 0b00000000], # /
    [0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00000000, 0b00011000, 0b00011000, 0b00000000], # !
    [0b00111100, 0b01000010, 0b10011101, 0b10100101, 0b10100101, 0b10011010, 0b01000000, 0b00111110], # @
    [0b00010010, 0b00010010, 0b01111111, 0b00010010, 0b00100100, 0b01111111, 0b00100100, 0b00100100], # #
    [0b00111100, 0b01001010, 0b01001000, 0b00111100, 0b00010010, 0b01010010, 0b00111100, 0b00000000], # $
    [0b01100010, 0b10010100, 0b10010100, 0b01111000, 0b00011110, 0b00101001, 0b00101001, 0b01000110], # %
    [0b00011000, 0b00100100, 0b01000010, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000], # ^
    [0b00011000, 0b00100100, 0b00100100, 0b00011000, 0b00100101, 0b01000010, 0b01000110, 0b00111101], # &
    [0b00101010, 0b00011100, 0b00011100, 0b00101010, 0b00000000, 0b00000000, 0b00000000, 0b00000000], # *
    [0b00011000, 0b00110000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00110000, 0b00011000], # (
    [0b00011000, 0b00001100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00001100, 0b00011000], # )
    [0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01111110], # _
    [0b00000000, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, 0b00000000, 0b00000000], # +
    [0b00011000, 0b00010000, 0b00010000, 0b00100000, 0b00100000, 0b00010000, 0b00010000, 0b00011000], # {
    [0b00011000, 0b00001000, 0b00001000, 0b00000100, 0b00000100, 0b00001000, 0b00001000, 0b00011000], # }
    [0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00001000], # |
    [0b00000000, 0b00011000, 0b00011000, 0b00000000, 0b00000000, 0b00011000, 0b00011000, 0b00000000], # :
    [0b00100100, 0b00100100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000], # "
    [0b00000100, 0b00011000, 0b00100000, 0b01000000, 0b01000000, 0b00100000, 0b00011000, 0b00000100], # <
    [0b00100000, 0b00011000, 0b00000100, 0b00000010, 0b00000010, 0b00000100, 0b00011000, 0b00100000], # >
    [0b00111000, 0b01000100, 0b00000100, 0b00000100, 0b00011000, 0b00000000, 0b00011000, 0b00011000], # ?
]

char_map = "0123456789 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-=[]\\;',./!@#$%^&*()_+{}|:\"<>?"

# Settings
img_width = 1920
img_height = 1080
scale = 16              # Adjust this if characters appear too small/large
char_size = 8 * scale
padding = 2            # Padding between characters
char_full = char_size + padding

# Calculate columns and rows based on available space
columns = img_width // char_full
rows = img_height // char_full
max_chars = columns * rows

# Trim char_map if too long
char_map = char_map[:min(len(char_map), max_chars)]

# Create canvas
image = Image.new('RGB', (img_width, img_height), color='black')
draw = ImageDraw.Draw(image)

# Calculate top-left starting point for centering
used_cols = min(columns, len(char_map))
used_rows = (len(char_map) + used_cols - 1) // used_cols

offset_x = (img_width - used_cols * char_full + padding) // 2
offset_y = (img_height - used_rows * char_full + padding) // 2

for i, char in enumerate(char_map):
    if i >= len(font):
        continue

    glyph = font[i]
    col = i % used_cols
    row = i // used_cols
    x_offset = offset_x + col * char_full
    y_offset = offset_y + row * char_full

    for r in range(8):
        for c in range(8):
            if (glyph[r] >> (7 - c)) & 1:
                for dx in range(scale):
                    for dy in range(scale):
                        image.putpixel((x_offset + c * scale + dx, y_offset + r * scale + dy), (255, 255, 255))

image.show()
image.save("SBMFont.png")
print("Font preview saved as font_preview.png")